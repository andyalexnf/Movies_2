var search_data = {"index":{"searchIndex":["moviedata","movietest","array_comparing_user_ratings()","comparing_all_to_u()","fill_2d_array()","make_2d_array()","mean()","mean()","most_similar()","movie_popularity_array()","movies()","new()","new()","popularity()","popularity_list()","predict()","rating()","rms()","run_test()","similarity()","stddev()","to_a()","viewers()"],"longSearchIndex":["moviedata","movietest","moviedata#array_comparing_user_ratings()","moviedata#comparing_all_to_u()","moviedata#fill_2d_array()","moviedata#make_2d_array()","moviedata#mean()","movietest#mean()","moviedata#most_similar()","moviedata#movie_popularity_array()","moviedata#movies()","moviedata::new()","movietest::new()","moviedata#popularity()","moviedata#popularity_list()","moviedata#predict()","moviedata#rating()","movietest#rms()","moviedata#run_test()","moviedata#similarity()","movietest#stddev()","movietest#to_a()","moviedata#viewers()"],"info":[["MovieData","","MovieData.html","",""],["MovieTest","","MovieTest.html","",""],["array_comparing_user_ratings","MovieData","MovieData.html#method-i-array_comparing_user_ratings","(user1, user2)","<p>go through rows of user1&#39;s and user2&#39;s movie ratings, and make a\nnew  array of diff&#39;s btwn â€¦\n"],["comparing_all_to_u","MovieData","MovieData.html#method-i-comparing_all_to_u","(u)","<p>compare all users to u and put similarties in an array\n"],["fill_2d_array","MovieData","MovieData.html#method-i-fill_2d_array","(file_contents,user_ratings)","<p>fill 2d array with users and movie ratings where row is user_id - 1  and\ncolumn is movie_id - 1\n"],["make_2d_array","MovieData","MovieData.html#method-i-make_2d_array","()","<p>make_2d_array makes a 2d array to hold data about users and movie ratings\n"],["mean","MovieData","MovieData.html#method-i-mean","(sum, num)","<p>method to get the mean\n"],["mean","MovieTest","MovieTest.html#method-i-mean","()","<p>calculate the mean prediction error\n"],["most_similar","MovieData","MovieData.html#method-i-most_similar","(u)","<p>generate a list of most to least similar other users to u\n"],["movie_popularity_array","MovieData","MovieData.html#method-i-movie_popularity_array","()","<p>generate an array containing popularity of every movie where index in the\narray is movie_id-1\n"],["movies","MovieData","MovieData.html#method-i-movies","(u)","<p>movies returns array of movies u has watched\n"],["new","MovieData","MovieData.html#method-c-new","(*args)","<p>1st initialize reads in u.data&#39;s 100k lines\n"],["new","MovieTest","MovieTest.html#method-c-new","(results)",""],["popularity","MovieData","MovieData.html#method-i-popularity","(movie_id)","<p>determines popularity of a given movie: the mean of all ratings\n"],["popularity_list","MovieData","MovieData.html#method-i-popularity_list","()","<p>Make a popularity list that contains movie_ids in order of most to least\npopular\n"],["predict","MovieData","MovieData.html#method-i-predict","(u,m)","<p>make prediction of u&#39;s rating of m based on top ten most similar users\nto  u who also rated m\n"],["rating","MovieData","MovieData.html#method-i-rating","(u,m)","<p>rating returns rating that user u gave movie m in training set\n"],["rms","MovieTest","MovieTest.html#method-i-rms","()","<p>return root mean square error of predictions\n"],["run_test","MovieData","MovieData.html#method-i-run_test","(k)","<p>run test runs predict of first k ratings in test results\n"],["similarity","MovieData","MovieData.html#method-i-similarity","(user1, user2)","<p>determine mean of diffs btwn 2 u\n"],["stddev","MovieTest","MovieTest.html#method-i-stddev","()","<p>return standard deviation of the errors\n"],["to_a","MovieTest","MovieTest.html#method-i-to_a","()","<p>return 2d array of predictions in form of [user,movie,rating,prediction]\n"],["viewers","MovieData","MovieData.html#method-i-viewers","(m)","<p>viewers returns array of users who saw movie m\n"]]}}